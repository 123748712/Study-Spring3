<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- id를 주기 위한 class bean 등록 -->
	<!-- Sequence상 @Component로 만들지 않는다. -->
	<beans:bean id="customAccessDeniedHandler" class="kr.or.soo.security.CustomAccessDeniedHandler" />
	<beans:bean id="customAuthenticationSuccessHandler" class="kr.or.soo.security.CustomAuthenticationSuccessHandler" />
<!-- 	<beans:bean id="customPasswordEncoder" class="kr.or.soo.security.CustomPasswordEncoder"></beans:bean> -->
	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<beans:bean id="customUserDetailsService" class="kr.or.soo.security.CustomUserDetailsService" />
	
	<!-- web 보안 --> <!-- auto-config 키워드 등록 태그 -->
	<http use-expressions="true"> <!-- 인증 설정 태그 -->
		<!-- 인증이 필요한 페이지를 등록하고 해당하는 권한을 설정 -->
		<!-- pattern : 권한과 인증이 필요한 페이지 등록 -->
		<!-- access : 권한을 가진 롤 옵션 등록(표현식에 따라 권한 다름), access 순서에 따라 에러발생(중요 !) -->
		<intercept-url pattern="/fbi/member" access="hasRole('ROLE_MEMBER')" /> <!-- 해당 권한을 가졌는지 검사 -->
		<intercept-url pattern="/fbi/admin" access="hasRole('ROLE_ADMIN')" /> <!-- 해당 권한을 가졌는지 검사 -->
		<intercept-url pattern="/fbi/admin2" access="hasRole('ROLE_ADMIN')" /> <!-- 해당 권한을 가졌는지 검사 -->
		<intercept-url pattern="/fbi/soo" access="hasRole('ROLE_SOO')" /> <!-- 해당 권한을 가졌는지 검사 -->
		<intercept-url pattern="/fbi/all" access="permitAll" />
		
		<!-- 위에 설정한 url 제외 권한 열기 -->
		<!-- 디렉토리가 들어가면 **(aaa/bbb/ccc), 그 외엔 *(/aaa, /bbb) -->
		<intercept-url pattern="/**" access="permitAll" /> <!-- 모두 허용 -->
		<!-- auto-config 키워드 등록시 login, logout 태그 열지 않아도 됨 그러나 잘 사용하지 않음-->
		<form-login login-page="/mylogin" authentication-success-handler-ref="customAuthenticationSuccessHandler"/> <!-- controller에서 get으로 화면출력의 용도처럼 url 등록, ...ref : 인증 성공시 실행할 class -->
<!-- 		<access-denied-handler error-page="/accessError" /> -->
		<access-denied-handler ref="customAccessDeniedHandler" /> <!-- 403 에러 발생시 실행 -->
		<logout invalidate-session="true" logout-url="/mylogout" delete-cookies="JSESSIONID, remember-me"/> <!-- 로그아웃시 자동으로 로그인화면 전환 -->
				<!-- 세션 무효화 키워드 -->                            <!-- 로그아웃시 지우고 싶은 cookie 설정 -->
						
		<!-- CSRF(Cross Site Request Forgery) : 정상적인 요청이 아닌 위조 요청 -->
		<csrf disabled="false" /> <!-- csrf 기능 막기 -->

		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" />
			<!-- 로그인시 한개의 session을 갖고 있다. true를 설정하게 되면 session max가 넘어가게 되면 error 발생 -->
		</session-management>
		<remember-me data-source-ref="dataSource" token-validity-seconds="259000"/>
		<!-- remember-me를 이용할 테이블 생성 후 dataSource로 db와 연결. token이 유지될 시간 설정(초단위) -->
	</http>
	
	<!-- 인증 관리자 설정 -->
	<authentication-manager erase-credentials="false"> <!-- erase-credentials : 인증 성공 후 지우기 값 -->
		<authentication-provider user-service-ref="customUserDetailsService"> <!-- user 클래스를 구현했기 때문에 bean생성 후 ref에 넣어줌 -->
			<!-- inMemory USER 설정으로 간단하게 USER 등록 -->
<!-- 			<user-service> 접근 USER 등록 권한 여러개 줄수 있음 -->
<!-- 				<user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_SOO, ROLE_MEMBER"/> -->
<!-- 				<user name="soo" password="{noop}soo" authorities="ROLE_SOO"/> -->
<!-- 			</user-service> -->

				<!-- 사용자상세정보(userdetails) -->
<!-- 			<jdbc-user-service data-source-ref="dataSource" -->
<!-- 			users-by-username-query="select userid,userpw,enabled from mymem where userid = ?" -->
<!-- 			authorities-by-username-query="select userid,userauth from myauth where userid = ?"/> -->
			 <!-- hikari로 설정한 jdbc데이터 가져오기
			 select username,password,enabled from users where username = ?
			 select username,authority from authorities where username = ?
			  이 디폴트. 다른 테이블, 다른 이름으로 하고 싶다면 이 구문 수정
			  -->
			<password-encoder ref="bcryptPasswordEncoder"/>
			<!-- password를 암호화해야하기 때문에 직접 암호화한 클래스 연결 -->
		
		</authentication-provider>
	</authentication-manager>
</beans:beans>	